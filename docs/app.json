[{"name": "app.py", "content": "# App to interactively view lineplots of LDAS variables and malaria case counts\n# This app has three widgets:\n# - LDAS variable selector     [Dropdown]\n# - District (ubigeo) selector [Dropdown]\n# - Offset value               [Slider]\n\n#%%Import packages\n#Import packages\nimport scipy\nimport pandas as pd\nimport geopandas as gpd\nfrom pathlib import Path\nimport json\nimport matplotlib.pyplot as plt\nfrom shinywidgets import output_widget, render_widget\nimport ipyleaflet\nfrom branca.colormap import linear\nfrom shiny import ui, render, App\n\n#%%Read in LDAS data (long format)\ndf_merged = pd.read_pickle(Path(__file__).parent.parent / 'data/Loreto_merged_data.pkl')\ngdf_districts = gpd.GeoDataFrame(pd.read_pickle(Path(__file__).parent.parent / 'data/Peru_departamentos.pkl'))\n\n#Filter function (whenever the LDAS variable changes)\ndef filter_data(df=df_merged, var='Rainfall(mm)', species='p_fal'):\n    '''Filter data on LDAS variable and species'''\n    #Filter the data for a single variable and species\n    df_filtered = df.xs(var, level='LDAS_variable').xs(species, level='species')\n    #Sort the data on ubigeo and EpiweekStartDate\n    df_filtered.sort_values(['ubigeo','EpiweekStartDate'], inplace=True)\n    return df_filtered\n\n#%% FUNCTIONS\n#Plot function\ndef line_plot(the_var, the_ubigeo, the_offset):\n    '''Create a line plot'''\n    #Create the plot title\n    the_title = f\"P. Falciparum cases & {the_var} for district {the_ubigeo}: {the_offset} weeks offset\"\n    print(the_title)\n\n    #Set the start and end times\n    start_time = '2010-01-01'\n    end_time = '2024-05-01'\n\n    #Filter the data for the var and the ubigeo\n    df_plot = (df_merged.xs(the_ubigeo, level='ubigeo').xs(the_var,level='LDAS_variable').xs('p_fal',level='species')).reset_index()\n\n    #Apply the offset to the case rate values\n    df_plot['case_rate'] = df_plot['case_rate'].shift(the_offset)\n\n    ## Plot the LDAS variable, split into retrospective and forecast components\n    fig, ax = plt.subplots()\n    ax.plot(df_plot['EpiweekStartDate'], df_plot['case_rate'], label='Case Rate')\n    ax.set_title(the_title)\n    ax.set_ylabel('Case Rate')\n\n    #Set the legend\n    ax.legend([the_var],loc='upper left')\n\n    #Create a shared axis for the surveillance data\n    shared_axis = ax.twinx()\n    shared_axis.set_xlim(pd.Timestamp(start_time), pd.Timestamp(end_time))\n\n    #Plot the surveillance data on the same x-axis\n    shared_axis.plot(df_plot['EpiweekStartDate'], df_plot['LDAS_value'],color='r',label=the_var,alpha=0.5,linewidth=0.3)\n    #shared_axis.legend(loc='upper right')\n\n    #Set the x-limits\n    ax.set_xlim(pd.Timestamp(start_time), pd.Timestamp(end_time))\n\n#Create map of correlations\ndef plot_correlations(the_var,the_offset,basemap):\n    #FILTER DATA\n    df_filtered = df_merged.xs(the_var,level='LDAS_variable').xs('p_fal',level='species')\n\n    #COMPUTE CORRELATIONS\n    df_correlation = pd.DataFrame(df_filtered\n            .groupby(['ubigeo','name'])\n            .apply(lambda x: x['case_rate'].shift(the_offset).corr(x['LDAS_value'], method='spearman'))\n            ).reset_index().rename(columns={0:'correlation'})\n\n    #JOIN WITH SPATIAL FEATURES\n    gdf = pd.merge(\n        left=gdf_districts,\n        right=df_correlation, \n        left_on=['id','name'], \n        right_on=['ubigeo','name'], \n        how='left')\n    gdf.set_index('ubigeo', inplace=True)\n\n    #CREATE CHOROPLETH OBJECT\n    # map key value dict\n    geojson_gdf = json.loads(gdf.to_json())\n    key_value_dict =  dict(zip(gdf.index.tolist(), gdf['correlation'].tolist()))\n\n    # Create the ipyleaflet choropleth object\n    choro_layer = ipyleaflet.Choropleth(\n        geo_data=geojson_gdf,\n        choro_data=key_value_dict,\n        colormap=linear.viridis,\n        nan_color=\"grey\",\n        nan_opacity=0.5,\n        border_color='black',\n        style={'fillOpacity': 0.8},\n        scheme='EqualInterval', \n        k=5)\n\n    # add to basemap\n    basemap.add(choro_layer)\n    \n\n    return basemap\n\n#%%Create app layout\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(   \n        #LDAS selector\n        ui.input_select(\n            id=\"LDAS_select\",\n            label=\"LDAS variable:\",\n            choices=list(df_merged.index.get_level_values('LDAS_variable').unique()) \n        ),\n        #ubigeo selector\n        ui.input_select(\n            id=\"district_select\",  \n            label=\"District ID:\",  \n            choices=list(df_merged.index.get_level_values('ubigeo').unique())\n        ),\n        #Offset slider\n        ui.input_slider(\"offset_select\", \"Lag time (weeks)\", min=0, max=52, value=0),\n        ),\n        #Map\n        output_widget(\"create_basemap\")\n    ),\n    ui.panel_main(\n        ui.output_plot(\"line_plot2\")\n    ),  \n)\n\n#%% Server \ndef server(input, output, session):\n    @render.plot(alt=\"A plot\")\n    #Function to populate the line plot\n    def line_plot2():\n        #Get inputs\n        the_var = input.LDAS_select()\n        the_ubigeo = input.district_select()\n        the_offset = input.offset_select()\n        #Create output\n        the_plot = line_plot(the_var,the_ubigeo,the_offset)\n        return the_plot\n    #Function to populate the basemap\n    @render.plot(alt=\"A plot\")\n    def line_plot3():\n        #Get inputs\n        the_var = input.LDAS_select()\n        the_ubigeo = input.district_select()\n        the_offset = input.offset_select()\n        #Create output\n        the_plot = line_plot(the_var,the_ubigeo,the_offset)\n        return the_plot\n    @render_widget\n    def create_basemap():\n        #Create the basemap\n        basemap = ipyleaflet.Map(center = (-4.2325,-74.2179), \n                max_zoom=8,\n                min_zoom=6,\n                zoom_control=True,\n                zoom=4,\n                scroll_wheel_zoom=True,\n                dragging=True,\n                #layout=Layout(width=\"60%\",height='600px')\n                )\n        #Get inputs\n        the_var = input.LDAS_select()\n        the_offset = input.offset_select()\n        #Create output\n        the_map = plot_correlations(the_var,the_offset,basemap)\n        return the_map\n\n#%% Create the app\napp = App(app_ui, server, debug=True)", "type": "text"}]